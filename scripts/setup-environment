#!/bin/sh
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012, 2013, 2016 O.S. Systems Software LTDA.
# Authored-by:  Otavio sSalvador <otavio@ossystems.com.br>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Add options for the script
# Copyright (C) 2013 Freescale Semiconductor, Inc.
invoked=$_   # needs to be first thing in the script


CWD=`pwd`
OLD_OPTIND=$OPTIND
OPTIND=1
PROGNAME="setup-environment"
PACKAGE_CLASSES="package_deb"
BUILD_DIR="build"

usage()
{
    echo -e "\nUsage: source $PROGNAME -b <build-dir>
    <build-dir>: specifies the build directory location (required)

If undefined, this script will set \$MACHINE to 'intel-corei7-64', \$DISTRO to 'poky'.
"

    ls sources/*/conf/machine/*.conf > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "
Supported machines: `echo; ls sources/*/conf/machine/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

You can run this script as:
MACHINE=<machine> DISTRO=<DISTRO> source $PROGNAME -b <build-dir>
"
    fi
}

clean_up()
{
   unset LIST_MACHINES VALID_MACHINE
   unset CWD TEMPLATES SHORTOPTS LONGOPTS ARGS PROGNAME
OPTIND=$OLD_OPTIND
   unset generated_config updated
   unset MACHINE SDKMACHINE DISTRO OEROOT
   unset zoetis_flag
}

if [[ $invoked == $0 ]] ; then
    usage
    clean_up
    echo "ERROR: you did not soure this script!!!!"
    exit 1    # the script was not sourced
fi

# get command line options
while getopts "hb:" zoetis_flag
do
    case $zoetis_flag in
        h)
            usage
            clean_up
            return 0
            ;;
        b)
            BUILD_DIR="$OPTARG"
	    echo build dir is $BUILD_DIR
            ;;
        ?)
            usage
            clean_up
            return 0
            ;;
    esac
done
OPTIND=$OLD_OPTIND

# Print the usage menu if invalid options are specified
if [ "${BUILD_DIR}" = "" ]; then
   echo "WARNING: <build-dir> undefined, use build as default dir"
   BUILD_DIR="build"
fi

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
fi

if [ -z "$MACHINE" ]; then
    MACHINE='intel-corei7-64'
    echo "WARNING: <machine> undefined, use ${MACHINE} as the default machine"
fi

# Check the machine type specified
LIST_MACHINES=`ls -1 $CWD/sources/*/conf/machine/`
VALID_MACHINE=`echo -e "$LIST_MACHINES" | grep ${MACHINE}.conf$ | wc -l`
if [ "x$MACHINE" = "x" ] || [ "$VALID_MACHINE" = "0" ]; then
    echo -e "\nThe \$MACHINE you have specified ($MACHINE) is not supported by this build setup"
    usage && clean_up
    return 1
else
    if [ ! -e $BUILD_DIR/conf/local.conf.sample ]; then
        echo "Configuring for ${MACHINE}"
    fi
fi

if [ -z "$DISTRO" ]; then
    DISTRO='poky'
fi
LIST_DISTRO=`ls -1 $CWD/sources/*/*/conf/distro/  $CWD/sources/*/*/conf/distro/`
VALID_DISTRO=`echo -e "$LIST_DISTRO" | grep ${DISTRO}.conf$ | wc -l`
if [ "x$DISTRO" = "x" ] || [ "$VALID_DISTRO" = "0" ]; then
    echo -e "\nThe \$DISTRO you have specified ($DISTRO) is not supported by this build setup"
    usage && clean_up
    return 1
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE='i686'
fi

OEROOT=$PWD/sources/poky
if [ -e $PWD/sources/oe-core ]; then
    OEROOT=$PWD/sources/oe-core
fi

# fixups:
# fix bazel
if [ -f sources/meta-tensorflow-lite/recipes-devtools/bazel/bazel-native_3.7.0.bb ]; then
  sed -i -e 's/inherit native pythonnative/inherit native python3native/' sources/meta-tensorflow-lite/recipes-devtools/bazel/bazel-native_3.7.0.bb
fi

# fix gk+3 (adds x11 support)
if [ -f sources/meta-freescale/recipes-graphics/gtk+/gtk+3_%.bbappend ]; then

    mv sources/meta-freescale/recipes-graphics/gtk+/gtk+3_%.bbappend \
       sources/meta-freescale/recipes-graphics/gtk+/gtk+3_%.xbbappend
fi

echo run . $OEROOT/oe-init-build-env $CWD/$BUILD_DIR
. $OEROOT/oe-init-build-env $CWD/$BUILD_DIR > /dev/null

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo $PATH | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"
# make sure DL_DIR is in BB_ENV_EXTRAWHITE
export BB_ENV_EXTRAWHITE="${BB_ENV_EXTRAWHITE} DL_DIR PRODUCT VERSION BUILD_TYPE"

# if conf/local.conf not generated, no need to go further
if [ ! -e conf/local.conf ]; then
    clean_up && return 1
fi

generated_config=
if [ ! -e conf/local.conf.sample ]; then
    mv conf/local.conf conf/local.conf.sample
    # Generate the local.conf based on the Yocto defaults
    TEMPLATES=$CWD/sources/meta-zoetis-intel-corei7/scripts
    grep -v '^#\|^$' conf/local.conf.sample > conf/local.conf
    cat >> conf/local.conf <<EOF

# Default to setting automatically based on cpu count
BB_NUMBER_THREADS = "\${@oe.utils.cpu_count()}"
# Default to setting automatically based on cpu count
PARALLEL_MAKE = "-j \${@oe.utils.cpu_count()}"
ACCEPT_FSL_EULA = "1"
# delete tmp work
INHERIT += "rm_work"
# work around for rm_work bug removing sudo
RM_WORK_EXCLUDE += "sudo"
# add package management features
EXTRA_IMAGE_FEATURES += " package-management tools-testapps tools-sdk"
SDKMACHINE ?= "x86_64"
LICENSE_FLAGS_WHITELIST="commercial"
IMAGE_FSTYPES += " wic"
SKIP_META_VIRT_SANITY_CHECK = "1"
PACKAGECONFIG_append_pn-qemu-system-native = " sdl"
IMAGE_FSTYPES = "live hddimg iso"

EOF
    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -e "s,PACKAGE_CLASSES ?=.*,PACKAGE_CLASSES ?= '$PACKAGE_CLASSES',g" \
        -i conf/local.conf

    cp $TEMPLATES/bblayers.conf conf/bblayers.conf

    for s in $HOME/.oe $HOME/.yocto; do
        if [ -e $s/site.conf ]; then
            echo "Linking $s/site.conf to conf/site.conf"
            ln -s $s/site.conf conf
        fi
    done

    generated_config=1
fi

cat <<EOF

Welcome to Zoetis Yocto BSP

The Yocto Project has extensive documentation about OE including a
reference manual which can be found at:
    http://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    http://www.openembedded.org/

You can now run 'bitbake <target>'

Common targets are:

    core-image-weston
    core-image-weston -c populate_sdk
    firmware-swupdate

EOF



if [ -n "$generated_config" ]; then
    cat <<EOF
Your build environment has been configured with:

    MACHINE=$MACHINE
    SDKMACHINE=$SDKMACHINE
    DISTRO=$DISTRO
EOF
else
    grep -q  "DISTRO ?= 'poky'" conf/local.conf
    if [ $? -eq 0 ] && [ "$DISTRO" != "poky" ] ; then
      sed -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
          -i conf/local.conf
      echo "Your distro has been set to $DISTRO"
    else
      echo "Your configuration files at $BUILD_DIR have not been touched."
    fi
fi

clean_up
